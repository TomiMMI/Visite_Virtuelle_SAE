//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Maps/LookMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LookMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LookMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LookMap"",
    ""maps"": [
        {
            ""name"": ""ViewMap"",
            ""id"": ""4dc18fe0-2327-403b-aa48-6bc6a57cdb8e"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""638f160e-605e-4928-9a7d-eb19aa488c87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""118c8721-8797-4784-8a06-49591836e435"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59f6519a-90bd-45e2-9522-e02a90547823"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.1,y=0.1)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c110710-f08b-4a21-8f28-26646ebef9a6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca80c9f-895d-48a0-ba11-08ef9d429620"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ViewMap
        m_ViewMap = asset.FindActionMap("ViewMap", throwIfNotFound: true);
        m_ViewMap_Look = m_ViewMap.FindAction("Look", throwIfNotFound: true);
        m_ViewMap_Interact = m_ViewMap.FindAction("Interact", throwIfNotFound: true);
    }

    ~@LookMap()
    {
        UnityEngine.Debug.Assert(!m_ViewMap.enabled, "This will cause a leak and performance issues, LookMap.ViewMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ViewMap
    private readonly InputActionMap m_ViewMap;
    private List<IViewMapActions> m_ViewMapActionsCallbackInterfaces = new List<IViewMapActions>();
    private readonly InputAction m_ViewMap_Look;
    private readonly InputAction m_ViewMap_Interact;
    public struct ViewMapActions
    {
        private @LookMap m_Wrapper;
        public ViewMapActions(@LookMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_ViewMap_Look;
        public InputAction @Interact => m_Wrapper.m_ViewMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_ViewMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ViewMapActions set) { return set.Get(); }
        public void AddCallbacks(IViewMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ViewMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ViewMapActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IViewMapActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IViewMapActions instance)
        {
            if (m_Wrapper.m_ViewMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IViewMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ViewMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ViewMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ViewMapActions @ViewMap => new ViewMapActions(this);
    public interface IViewMapActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
